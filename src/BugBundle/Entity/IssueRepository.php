<?php

namespace BugBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * IssueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IssueRepository extends EntityRepository
{
    public function getAllIssuesQuery()
    {
        return $this->getEntityManager()->createQuery("SELECT i FROM BugBundle:issue i");
    }

    public function getIssuesByUserQuery(User $user)
    {
        $qb = $this->createQueryBuilder('i')
            ->innerJoin('i.project', 'p')
            ->leftJoin('p.members', 'members');
        $qb->where($qb->expr()->orX(
            $qb->expr()->in('members', ':user'),
            $qb->expr()->eq('p.creator', ':user')

        ))
            ->setParameter('user', $user);
        return $qb->getQuery();
    }

    public function getActualIssuesByUserCollaboratorQuery(User $user){
        $issueStatusOpen=$this->getEntityManager()->getRepository('BugBundle:IssueStatus')->findBy(array('label'=>IssueStatus::OPEN));
        $issueStatusReopen=$this->getEntityManager()->getRepository('BugBundle:IssueStatus')->findBy(array('label'=>IssueStatus::REOPEN));
        $qb=$this->createQueryBuilder('i')
            ->innerJoin('i.collaborators','collaborators');
        $qb->where($qb->expr()->andX(
            $qb->expr()->in('collaborators', ':user'),
            $qb->expr()->orX(
                $qb->expr()->eq('i.status',':status_open'),
                $qb->expr()->eq('i.status',':status_reopen')
            )

        ))
            ->setParameter('user', $user)
            ->setParameter('status_open', $issueStatusOpen)
            ->setParameter('status_reopen', $issueStatusReopen);

            return $qb->getQuery();
    }

    public function getActualIssuesByUserCollaborator(User $user){
        return $this->getActualIssuesByUserCollaboratorQuery($user)->getResult();
    }


}
